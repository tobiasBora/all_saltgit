* Skeleton git repository
This folder is a git repository whose aim is to control a whole Master by using only this repository.

** Idea
When you push to this repo, a git hook will update the following master files and folders:

- the files in =./srv/= will be put in =/srv/=. Beware, do not manually modify the files in =/srv/=, it will be erased at each push !!!

- the files in =./etc_salt_master.d/= will be put in =/etc/salt/master.d/=. Beware, do not manually modify the files in =/etc/salt/master.d/=, it will be erased at each push !!!

** How to setup a new master from scratch

MAKE SURE THAT YOU DON'T HAVE ANY VALUABLE THING IN =/etc/salt/master.d/= and =/srv/= ON THE SERVER, BECAUSE EVERYTHING WILL BE DELETED !!! If you have some stuff inside, then save them and copy them in this repository instead.


*** Installation of salt on the server

First make sure you have =sudo= installed and =rsync=, it will be useful later:
: apt install sudo rsync

First install salt :
: wget -O bootstrap-salt.sh https://bootstrap.saltstack.com
: sudo sh bootstrap-salt.sh -M

Then start the master:
: sudo systemctl enable salt-server
: sudo systemctl start salt-server

and enable the `.conf`
: sudo sed -i 's@^#default_include: master.d/\*.conf$@default_include: master.d/\*.conf@' /etc/salt/master

(If you want to add a minion)
Configure the minion to point to localhost:
: sudo sed -i 's/^#master:.*$/master: localhost/' /etc/salt/minion
Start it:
: sudo systemctl enable salt-minion
: sudo systemctl start salt-minion
Check that the id is fine, and change it not:
: cat /etc/salt/minion_id
Check the available keys to the server:
: salt-key -L
Accept them:
: salt-key -A

*** Upload the git repository from the client to the server

[On the client]

Create an empty repository on the server (the user does not really matter):
: ssh <user>@<server> "git init --bare ~/salt/salt_config.git"

Set-up the remote on the client:
: git remote add saltserver <user>@<server>:salt/salt_config.git

Push the repo to the server:
: git push --set-upstream saltserver master

*** Setup a hook script

[On the server]

The idea is that when you will push something to the repository, a script will update the files in =/etc/salt/master.d/= and =/srv/=. But because the script will modify some files owned by root, we will create a script owned by root that will do the job. So on the server create a file like that:

: sudo mkdir -p /opt/git_hook/

Now open this file as root:
: sudo nano /opt/git_hook/update_salt_folder.sh

and put inside your favorite [[http://gitolite.com/deploy.html][git deploy]] method (!!! if you copy/paste mine, don't forget to change the =<user>= name !!!):

#+BEGIN_SRC bash
#!/usr/bin/env bash
set -e

# !!!!! Change this line !!!!
cd /home/<user>/salt/salt_config.git/
tempdir=$(mktemp -d --tmpdir salt-XXXXXXXXXX)
git archive master | tar -C "$tempdir" -xf -
if [ -e "$tempdir/srv/" ]; then
    for subfolder in "$tempdir/srv/"*; do
        rsync -r --delete-after --no-p --chown=root:root --chmod=Du=rwx,Dgo=,Fu=rw,Fog= "$tempdir/srv/" /srv/
    done
fi
if [ -e "$tempdir/etc_salt_master.d/" ]; then
    rsync -r --delete-after --no-p --chown=root:root --chmod=Du=rwx,Dgo=rx,Fu=rw,Fog=rx "$tempdir/etc_salt_master.d/" /etc/salt/master.d/
fi
rm -rf "$tempdir"
#+END_SRC

Then, to make sure that you can run this script as root from any user, type:
: visudo
and add at the end (!!! Please replace <user> by your username):
: <user> ALL = (root) NOPASSWD: /opt/git_hook/update_salt_folder.sh

*** Call the hook script

[On the server]

The end is close! Now, you just need to modify the hook file to point to your script:

: cd /home/<user>/salt/salt_config.git/hooks/
: nano post-receive

and put inside a call to the hook script:
#+BEGIN_SRC bash
#!/usr/bin/env bash
sudo /opt/git_hook/update_salt_folder.sh
#+END_SRC

and make it executable
: chmod +x post-receive

*** Enjoy !
Now, you can try it. Just edit on the client the files in =./srv/= and =./etc_salt_master.d/= and push the modifications to the server: the files should be uploaded in the good folder.

Now you just need to apply these changes on the server side as usual:

To apply everything:
: salt '*' state.apply
To run only one SLS formula:
: salt '*' state.apply emacs

NB: You can add this command at the end of the =/opt/git_hook/update_salt_folder.sh= folder, and as a consequence everytime you push a commit it will be applied. But please note that the ssh command won't be close until the =state.apply= command be finished.
